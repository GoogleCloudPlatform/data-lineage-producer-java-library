<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (C) 2024 Google Inc.

    Licensed under the Apache License, Version 2.0 (the "License"); you may not
    use this file except in compliance with the License. You may obtain a copy of
    the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations under
    the License.
-->
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html -->
<!-- Checks with numbered comments refer to recommendations made
by Joshua Bloch in his book Effective Java -->
<module name="Checker">
  <property name="charset" value="UTF-8"/>
  <!-- Fork - include a suppressions file. This allows us to enforce different policies for test
  code. -->
  <module name="SuppressionFilter">
    <property name="file" value="${config_loc}/suppressions.xml"/>
  </module>
  <!-- ENDFORK -->
  <module name="FileTabCharacter">
    <!-- Checks that there are no tab characters in the file.
    -->
  </module>
  <module name="RegexpSingleline">
    <!-- Checks that FIXME is not used in comments.  TODO is preferred.
    -->
    <property name="format" value="((//.*)|(\*.*))FIXME" />
    <property name="message" value='TODO is preferred to FIXME.  e.g. "TODO(johndoe): Refactor when v2 is released."' />
  </module>
  <module name="LineLength">
    <!-- Checks if a line is too long. -->
    <property name="max" value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.max}" default="100"/>
    <property name="severity" value="error"/>
    <!-- Ignore lines that have any series of 80 or more non-whitespace characters.
    These lines likely cannot be broken.
    -->
    <property name="ignorePattern"
        value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.ignorePattern}"
        default=".*[^ ]{80,}.*"/>
  </module>
  <!-- All Java AST specific tests live under TreeWalker module. -->
  <module name="TreeWalker">
    <!--
    IMPORT CHECKS
    -->
    <module name="RedundantImport">
      <property name="severity" value="error"/>
    </module>
    <module name="AvoidStarImport">
      <property name="severity" value="error"/>
    </module>
    <module name="UnusedImports">
      <!-- DPL is a notable violator of this rule. -->
      <property name="severity" value="error"/>
      <!-- Imports used only in Javadoc are tolerated. See http://b/838496 -->
      <property name="processJavadoc" value="true"/>
      <message
          key="import.unused"
          value="Unused import: {0}. Use /google/src/head/depot/google3/tools/java/fix_imports.py to automatically remove unused imports." />
    </module>
    <module name="ImportOrder">
      <!-- Checks for out of order import statements. -->
      <metadata name="altname" value="ImportOrder"/>
      <property name="severity" value="warning"/>
      <!-- This ensures that static imports go first. -->
      <property name="option" value="top"/>
      <property name="tokens" value="STATIC_IMPORT, IMPORT"/>
      <property name="sortStaticImportsAlphabetically" value="true"/>
      <!-- https://github.com/checkstyle/checkstyle/issues/6391 -->
      <property name="separated" value="true"/>
      <message
          key="import.ordering"
          value="Wrong order for {0} import. Use /google/src/head/depot/google3/tools/java/fix_imports.py to automatically sort your imports." />
    </module>
    <!--
    JAVADOC CHECKS
    -->
    <module name="JavadocTypeCheck">
      <!-- Style guide doesn't prohibit custom tags. Typos will be caught by other tools. -->
      <property name="allowUnknownTags" value="true"/>
      <property name="allowMissingParamTags" value="true"/>
    </module>
    <!-- FORK: use open-source MissingJavadocType policy. -->
    <module name="MissingJavadocType">
      <!-- Checks for missing Javadoc for classes with visibility no less than protected. -->
      <property name="scope" value="protected"/>
      <property name="severity" value="error"/>
    </module>
    <!-- ENDFORK -->
    <!--
    NAMING CHECKS
    -->
    <!-- Item 38 - Adhere to generally accepted naming conventions -->
    <module name="PackageName">
      <!-- Validates identifiers for package names against the
        supplied expression. -->
      <property name="format" value="^([a-z][a-z0-9]*)(\.[a-z][a-z0-9]*)*$"/>
      <property name="severity" value="warning"/>
    </module>
    <module name="TypeNameCheck">
      <!-- Validates static, final fields against the supplied expression. -->
      <metadata name="altname" value="TypeName"/>
      <property name="severity" value="warning"/>
      <property name="format" value="^[A-Z][a-zA-Z0-9]*(_CustomFieldSerializer)?$"/>
    </module>
    <!-- FORK: This policy was disabled as the corresponding open-source policy did not limit itself
     to particular classes and is noisy as a result. -->
    <!--    <module name="ConstantNameCheck">-->
    <!--      &lt;!&ndash; Validates that constant fields are named in ALL_CAPS. &ndash;&gt;-->
    <!--      <metadata name="altname" value="ConstantName"/>-->
    <!--      <property name="applyToPublic" value="true"/>-->
    <!--      <property name="applyToProtected" value="true"/>-->
    <!--      <property name="applyToPackage" value="true"/>-->
    <!--      <property name="applyToPrivate" value="true"/>-->
    <!--      <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>-->
    <!--      <message key="name.invalidPattern"-->
    <!--               value="Variable ''{0}'' is a constant and thus should be in ALL_CAPS."/>-->
    <!--      <property name="severity" value="warning"/>-->
    <!--    </module>-->
    <!-- ENDFORK -->
    <module name="MemberNameCheck">
      <!-- Validates non-static members against the supplied expression. -->
      <metadata name="altname" value="MemberName"/>
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="true"/>
      <!-- allows for googles deprecated foo_ member naming scheme -->
      <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
      <property name="severity" value="warning"/>
    </module>
    <module name="MethodNameCheck">
      <!-- Validates identifiers for method names. -->
      <metadata name="altname" value="MethodName"/>
      <property name="format" value="^([a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*|__constructor__|__staticInitializer__)$"/>
      <property name="severity" value="warning"/>
    </module>
    <module name="ParameterName">
      <!-- Validates identifiers for method parameters against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
      <property name="severity" value="warning"/>
    </module>
    <module name="LocalFinalVariableName">
      <!-- Validates identifiers for local final variables against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
      <property name="severity" value="warning"/>
    </module>
    <module name="LocalVariableName">
      <!-- Validates identifiers for local variables against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
      <property name="severity" value="warning"/>
    </module>
    <!--
    LENGTH and CODING CHECKS
    -->
    <module name="OperatorWrap"/>
    <module name="LeftCurly">
      <!-- Checks for placement of the left curly brace ('{'). -->
      <property name="severity" value="warning"/>
      <property name="tokens" value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF, INTERFACE_DEF, LAMBDA, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF, OBJBLOCK, STATIC_INIT"/>
    </module>
    <module name="RightCurly">
      <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on
      the same line. e.g., the following example is fine:
      <pre>
        if {
          ...
        } else
      </pre>
      -->
      <!-- This next example is not fine:
      <pre>
        if {
          ...
        }
        else
      </pre>
      -->
      <property name="option" value="same"/>
      <property name="severity" value="warning"/>
    </module>
    <!-- Checks for braces around if and else blocks -->
    <module name="NeedBraces">
      <property name="severity" value="warning"/>
      <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
    </module>
    <!-- Checks for empty catch blocks in non-test files. -->
    <module name="EmptyCatchBlock">
      <property name="exceptionVariableName" value="expected"/>
      <property name="severity" value="error"/>
      <message key="catchBlock.empty"
          value="Empty catch blocks are not allowed. If this is an expected exception, it should be named 'expected'."/>
    </module>
    <!--
    MODIFIERS CHECKS
    -->
    <module name="ModifierOrder">
      <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and
           8.4.3.  The prescribed order is:
           public, protected, private, abstract, static, final, transient, volatile,
           synchronized, native, strictfp
        -->
    </module>
    <!--
    WHITESPACE CHECKS
    -->
    <!-- FORK: Whitespace enforcement is handled by other tools in google3, but we need this policy
    to enforce consistency in GoB. -->
    <module name="Indentation">
      <property name="basicOffset" value="2"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="2"/>
      <property name="throwsIndent" value="4"/>
      <property name="lineWrappingIndentation" value="4"/>
      <property name="arrayInitIndent" value="2"/>
    </module>
    <!-- ENDFORK -->
    <module name="WhitespaceAround">
      <!-- Checks that various tokens are surrounded by whitespace.
           This includes most binary operators and keywords followed
           by regular or curly braces.
      -->
      <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR,
        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,
        EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,
        SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN"/>
      <property name="severity" value="error"/>
      <property name="ignoreEnhancedForColon" value="false"/>
    </module>
    <module name="WhitespaceAfter">
      <!-- Checks that commas, semicolons and typecasts are followed by
           whitespace.
      -->
      <property name="tokens" value="COMMA, SEMI, TYPECAST"/>
    </module>
    <module name="NoWhitespaceAfter">
      <!-- Checks that there is no whitespace after various unary operators.
           Linebreaks are allowed.
      -->
      <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,
        UNARY_PLUS"/>
      <property name="allowLineBreaks" value="true"/>
      <property name="severity" value="error"/>
    </module>
    <module name="NoWhitespaceBefore">
      <!-- Checks that there is no whitespace before various unary operators.
           Linebreaks are allowed.
      -->
      <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC"/>
      <property name="allowLineBreaks" value="true"/>
      <property name="severity" value="error"/>
    </module>
    <module name="ParenPad">
      <!-- Checks that there is no whitespace before close parens or after
           open parens. Allows whitespace after open parens if it is followed
           by the end of a line or by the start of a comment. Allows whitespace
           before close parens if it is preceeded by the start of a line or by
           the end of a block comment.
      -->
      <metadata name="altname" value="ParenPad"/>
      <!-- FORK: This property isn't supported by the open-source implementation. -->
      <!--      <property name="ignoreComments" value="true"/> -->
      <!-- ENDFORK -->
      <property name="severity" value="warning"/>
    </module>
  </module>
</module>