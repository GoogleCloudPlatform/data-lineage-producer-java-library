// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
}

googleJavaFormat {
    toolVersion = '1.7'
}

ext {
    cloudBomVersion = '26.37.0'
    protobufVersion = '3.23.0'
    grpcProtobufVersion = '1.54.1'
    gaxVersion = '2.29.0'
    gaxHttpJsonVersion = '0.103.7'
    gaxTestLibVersion = '2.12.2'
    guavaVersion = '33.2.1-jre'
    junitVersion = '4.13.2'
    truthVersion = '1.1.3'
    mockitoVersion = '3.+'
    parameterInjectorVersion = '1.8'
    slf4jVersion = '2.0.9'
    logbackVersion = '1.4.14'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation platform("com.google.cloud:libraries-bom:${cloudBomVersion}")
    implementation "com.google.cloud:google-cloud-datalineage"

    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "com.google.api:gax:${gaxVersion}"
    implementation "com.google.api:gax-grpc:${gaxVersion}"
    implementation "com.google.api:gax-httpjson:${gaxHttpJsonVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcProtobufVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    
    // SLF4J logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    
    // Use JUnit test framework.
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "com.google.truth:truth:${truthVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "com.google.api:gax:${gaxTestLibVersion}:testlib"
    testImplementation "com.google.testparameterinjector:test-parameter-injector:${parameterInjectorVersion}"
    
    // Test logging dependencies
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
    testImplementation "ch.qos.logback:logback-core:${logbackVersion}"
}

test {
    include '**/*Test.class'
}

shadowJar {
    archiveBaseName.set('data-lineage-producer-java-library')
    archiveClassifier.set('')

    def excludedPrefixes = [
            'android/', 'javax/', 'io/opentelemetry', 'com/google/', 'opencensus/', 'grpc/', 'google/', 'org/'
    ]

    def includedPrefixes = [
            'com/google/api', 'com/google/auth', 'com/google/common',
            'com/google/gson', 'com/google/protobuf', 'com/google/longrunning',
            'com/google/rpc', 'com/google/cloud/datalineage',
            'com/google/cloud/datacatalog', 'org/threeten'
    ]

    def includedExactPaths = [
            'com/google/cloud', 'org'
    ]

    // exclude from shaded jar all packages starting with excludedPrefixes
    // but keep those starting with includedPrefixes or containing exact paths from includedExactPaths
    exclude { FileTreeElement fte ->
        def isExcluded = excludedPrefixes.any { fte.path.startsWith(it) }
        def isIncluded = includedPrefixes.any { fte.path.startsWith(it) }
                || includedExactPaths.contains(fte.path)
        return isExcluded && !isIncluded
    }

    [
            'com.google.protobuf',
            'com.google.guava',
            'com.google.api',
            'com.google.auth',
            'com.google.longrunning',
            'com.google.rpc',
            'com.google.cloud.datacatalog',
            'io.grpc',
            'io.opencensus',
            'io.perfmark',
            'com.google.common',
            'com.google.gson',
            'org.threeten.bp'
    ].each { packageName ->
        relocate packageName, "datalineage.shaded.${packageName}"
    }
    [
            'META-INF/native/libio_grpc_netty_shaded_netty',
            'META-INF/native/io_grpc_netty_shaded_netty'
    ].each { path ->
        relocate path, path.replaceFirst(/[^\/]+$/, { "datalineage_shaded_$it" })
    }

    mergeServiceFiles()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            version = '1.0.0'
            group = 'com.google.cloud.datalineage'
            artifactId = 'producerclient'

            artifact shadowJar
            artifact javadocJar
            artifact sourcesJar

            pom {
                name = 'Java producer library for Data Lineage.'
                description = 'Library that provides synchronous and asynchronous clients for interacting with the Google Cloud Data Lineage API.'
                url = 'https://github.com/GoogleCloudPlatform/data-lineage-producer-java-library'
                properties = [:]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'midamkina'
                        name = 'Mary Idamkina'
                        email = 'midamkina@google.com'
                    }
                    developer {
                        id = 'gabrysiaolsz'
                        name = 'Gabriela Olszewska'
                        email = 'gabrysiaolsz@google.com'
                    }
                    developer {
                        id = 'ngorchakova'
                        name = 'Natalia Gorchakova'
                        email = 'ngorchakova@google.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/GoogleCloudPlatform/data-lineage-producer-java-library.git'
                    developerConnection = 'scm:git:ssh://git@github.com/GoogleCloudPlatform/data-lineage-producer-java-library.git'
                    url = 'https://github.com/GoogleCloudPlatform/data-lineage-producer-java-library'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://google.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://google.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                // TODO: set those with your https://google.oss.sonatype.org OSSRH server user token.
                username = 'secret'
                password = 'secret'
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}